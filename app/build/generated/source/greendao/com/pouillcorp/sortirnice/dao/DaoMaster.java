package com.pouillcorp.sortirnice.dao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.util.Log;

import org.greenrobot.greendao.AbstractDaoMaster;
import org.greenrobot.greendao.database.StandardDatabase;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseOpenHelper;
import org.greenrobot.greendao.identityscope.IdentityScopeType;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * Master of DAO (schema version 1): knows all DAOs.
 */
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 1;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(Database db, boolean ifNotExists) {
        DateMajDao.createTable(db, ifNotExists);
        EntryActivityEntityDao.createTable(db, ifNotExists);
        EntryAddressEntityDao.createTable(db, ifNotExists);
        EntryAffiliationEntityDao.createTable(db, ifNotExists);
        EntryAllianceOptionEntityDao.createTable(db, ifNotExists);
        EntryAmenityEntityDao.createTable(db, ifNotExists);
        EntryAnimationEntityDao.createTable(db, ifNotExists);
        EntryAtmospherEntityDao.createTable(db, ifNotExists);
        EntryCapacityEntityDao.createTable(db, ifNotExists);
        EntryCategoryEntityDao.createTable(db, ifNotExists);
        EntryChainEntityDao.createTable(db, ifNotExists);
        EntryClosingEntityDao.createTable(db, ifNotExists);
        EntryClosureEntityDao.createTable(db, ifNotExists);
        EntryCommerciaEntityDao.createTable(db, ifNotExists);
        EntryCommonTagEntityDao.createTable(db, ifNotExists);
        EntryContactEntityDao.createTable(db, ifNotExists);
        EntryDescriptionEntityDao.createTable(db, ifNotExists);
        EntryDisabledOptionEntityDao.createTable(db, ifNotExists);
        EntryFamilyOptionEntityDao.createTable(db, ifNotExists);
        EntryFrpOptionEntityDao.createTable(db, ifNotExists);
        EntryFurnishedRentalEntityDao.createTable(db, ifNotExists);
        EntryGridEntityDao.createTable(db, ifNotExists);
        EntryGroupOptionEntityDao.createTable(db, ifNotExists);
        EntryImageEntityDao.createTable(db, ifNotExists);
        EntryLabelEntityDao.createTable(db, ifNotExists);
        EntryLanguageEntityDao.createTable(db, ifNotExists);
        EntryLivingEntityDao.createTable(db, ifNotExists);
        EntryLocationEntityDao.createTable(db, ifNotExists);
        EntryOpeningEntityDao.createTable(db, ifNotExists);
        EntryOptionEntityDao.createTable(db, ifNotExists);
        EntryPaymentEntityDao.createTable(db, ifNotExists);
        EntryPoiOptionEntityDao.createTable(db, ifNotExists);
        EntryProfileEntityDao.createTable(db, ifNotExists);
        EntryPublicationEntityDao.createTable(db, ifNotExists);
        EntryRentalMonthEntityDao.createTable(db, ifNotExists);
        EntrySectorEntityDao.createTable(db, ifNotExists);
        EntryServiceEntityDao.createTable(db, ifNotExists);
        EntrySleepingEntityDao.createTable(db, ifNotExists);
        EntrySpaceEntityDao.createTable(db, ifNotExists);
        EntryStandingLevelEntityDao.createTable(db, ifNotExists);
        EntryStationEntityDao.createTable(db, ifNotExists);
        EntryTariffEntityDao.createTable(db, ifNotExists);
        EntryTypeEntityDao.createTable(db, ifNotExists);
        EntryEntityDao.createTable(db, ifNotExists);
        JoinEntryEntityWithEntryActivityEntityDao.createTable(db, ifNotExists);
        JoinEntryEntityWithEntryAffiliationEntityDao.createTable(db, ifNotExists);
        JoinEntryEntityWithEntryAllianceOptionEntityDao.createTable(db, ifNotExists);
        JoinEntryEntityWithEntryAmenityEntityDao.createTable(db, ifNotExists);
        JoinEntryEntityWithEntryAnimationEntityDao.createTable(db, ifNotExists);
        JoinEntryEntityWithEntryAtmospherEntityDao.createTable(db, ifNotExists);
        JoinEntryEntityWithEntryCategoryEntityDao.createTable(db, ifNotExists);
        JoinEntryEntityWithEntryChainEntityDao.createTable(db, ifNotExists);
        JoinEntryEntityWithEntryClosingEntityDao.createTable(db, ifNotExists);
        JoinEntryEntityWithEntryClosureEntityDao.createTable(db, ifNotExists);
        JoinEntryEntityWithEntryCommerciaEntityDao.createTable(db, ifNotExists);
        JoinEntryEntityWithEntryCommonTagEntityDao.createTable(db, ifNotExists);
        JoinEntryEntityWithEntryContactEntityDao.createTable(db, ifNotExists);
        JoinEntryEntityWithEntryDescriptionEntityDao.createTable(db, ifNotExists);
        JoinEntryEntityWithEntryDisabledOptionEntityDao.createTable(db, ifNotExists);
        JoinEntryEntityWithEntryFamilyOptionEntityDao.createTable(db, ifNotExists);
        JoinEntryEntityWithEntryFrpOptionEntityDao.createTable(db, ifNotExists);
        JoinEntryEntityWithEntryFurnishedRentalEntityDao.createTable(db, ifNotExists);
        JoinEntryEntityWithEntryGroupOptionEntityDao.createTable(db, ifNotExists);
        JoinEntryEntityWithEntryImageEntityDao.createTable(db, ifNotExists);
        JoinEntryEntityWithEntryLabelEntityDao.createTable(db, ifNotExists);
        JoinEntryEntityWithEntryLanguageEntityDao.createTable(db, ifNotExists);
        JoinEntryEntityWithEntryLocationEntityDao.createTable(db, ifNotExists);
        JoinEntryEntityWithEntryOpeningEntityDao.createTable(db, ifNotExists);
        JoinEntryEntityWithEntryOptionEntityDao.createTable(db, ifNotExists);
        JoinEntryEntityWithEntryPaymentEntityDao.createTable(db, ifNotExists);
        JoinEntryEntityWithEntryPoiOptionEntityDao.createTable(db, ifNotExists);
        JoinEntryEntityWithEntryProfileEntityDao.createTable(db, ifNotExists);
        JoinEntryEntityWithEntryPublicationEntityDao.createTable(db, ifNotExists);
        JoinEntryEntityWithEntryRentalMonthEntityDao.createTable(db, ifNotExists);
        JoinEntryEntityWithEntrySectorEntityDao.createTable(db, ifNotExists);
        JoinEntryEntityWithEntryServiceEntityDao.createTable(db, ifNotExists);
        JoinEntryEntityWithEntrySleepingEntityDao.createTable(db, ifNotExists);
        JoinEntryEntityWithEntrySpaceEntityDao.createTable(db, ifNotExists);
        JoinEntryEntityWithEntryStandingLevelEntityDao.createTable(db, ifNotExists);
        JoinEntryEntityWithEntryStationEntityDao.createTable(db, ifNotExists);
        JoinEntryEntityWithEntryTariffEntityDao.createTable(db, ifNotExists);
        JoinEntryOpeningEntityWithEntryGridEntityDao.createTable(db, ifNotExists);
        EvenementAddressEntityDao.createTable(db, ifNotExists);
        EvenementCategoryEntityDao.createTable(db, ifNotExists);
        EvenementDescriptionEntityDao.createTable(db, ifNotExists);
        EvenementOptionEntityDao.createTable(db, ifNotExists);
        EvenementProfileEntityDao.createTable(db, ifNotExists);
        EvenementRefEntriesEntityDao.createTable(db, ifNotExists);
        EvenementSectoEntityDao.createTable(db, ifNotExists);
        EvenementStationEntityDao.createTable(db, ifNotExists);
        EvenementEntityDao.createTable(db, ifNotExists);
        EventEntityDao.createTable(db, ifNotExists);
        JoinEvenementEntityWithEvenementAddressEntityDao.createTable(db, ifNotExists);
        JoinEvenementEntityWithEvenementCategoryEntityDao.createTable(db, ifNotExists);
        JoinEvenementEntityWithEvenementDescriptionEntityDao.createTable(db, ifNotExists);
        JoinEvenementEntityWithEvenementOptionEntityDao.createTable(db, ifNotExists);
        JoinEvenementEntityWithEvenementProfileEntityDao.createTable(db, ifNotExists);
        JoinEvenementEntityWithEvenementRefEntriesEntityDao.createTable(db, ifNotExists);
        JoinEvenementEntityWithEvenementSectoEntityDao.createTable(db, ifNotExists);
        JoinEvenementEntityWithEvenementStationEntityDao.createTable(db, ifNotExists);
    }

    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(Database db, boolean ifExists) {
        DateMajDao.dropTable(db, ifExists);
        EntryActivityEntityDao.dropTable(db, ifExists);
        EntryAddressEntityDao.dropTable(db, ifExists);
        EntryAffiliationEntityDao.dropTable(db, ifExists);
        EntryAllianceOptionEntityDao.dropTable(db, ifExists);
        EntryAmenityEntityDao.dropTable(db, ifExists);
        EntryAnimationEntityDao.dropTable(db, ifExists);
        EntryAtmospherEntityDao.dropTable(db, ifExists);
        EntryCapacityEntityDao.dropTable(db, ifExists);
        EntryCategoryEntityDao.dropTable(db, ifExists);
        EntryChainEntityDao.dropTable(db, ifExists);
        EntryClosingEntityDao.dropTable(db, ifExists);
        EntryClosureEntityDao.dropTable(db, ifExists);
        EntryCommerciaEntityDao.dropTable(db, ifExists);
        EntryCommonTagEntityDao.dropTable(db, ifExists);
        EntryContactEntityDao.dropTable(db, ifExists);
        EntryDescriptionEntityDao.dropTable(db, ifExists);
        EntryDisabledOptionEntityDao.dropTable(db, ifExists);
        EntryFamilyOptionEntityDao.dropTable(db, ifExists);
        EntryFrpOptionEntityDao.dropTable(db, ifExists);
        EntryFurnishedRentalEntityDao.dropTable(db, ifExists);
        EntryGridEntityDao.dropTable(db, ifExists);
        EntryGroupOptionEntityDao.dropTable(db, ifExists);
        EntryImageEntityDao.dropTable(db, ifExists);
        EntryLabelEntityDao.dropTable(db, ifExists);
        EntryLanguageEntityDao.dropTable(db, ifExists);
        EntryLivingEntityDao.dropTable(db, ifExists);
        EntryLocationEntityDao.dropTable(db, ifExists);
        EntryOpeningEntityDao.dropTable(db, ifExists);
        EntryOptionEntityDao.dropTable(db, ifExists);
        EntryPaymentEntityDao.dropTable(db, ifExists);
        EntryPoiOptionEntityDao.dropTable(db, ifExists);
        EntryProfileEntityDao.dropTable(db, ifExists);
        EntryPublicationEntityDao.dropTable(db, ifExists);
        EntryRentalMonthEntityDao.dropTable(db, ifExists);
        EntrySectorEntityDao.dropTable(db, ifExists);
        EntryServiceEntityDao.dropTable(db, ifExists);
        EntrySleepingEntityDao.dropTable(db, ifExists);
        EntrySpaceEntityDao.dropTable(db, ifExists);
        EntryStandingLevelEntityDao.dropTable(db, ifExists);
        EntryStationEntityDao.dropTable(db, ifExists);
        EntryTariffEntityDao.dropTable(db, ifExists);
        EntryTypeEntityDao.dropTable(db, ifExists);
        EntryEntityDao.dropTable(db, ifExists);
        JoinEntryEntityWithEntryActivityEntityDao.dropTable(db, ifExists);
        JoinEntryEntityWithEntryAffiliationEntityDao.dropTable(db, ifExists);
        JoinEntryEntityWithEntryAllianceOptionEntityDao.dropTable(db, ifExists);
        JoinEntryEntityWithEntryAmenityEntityDao.dropTable(db, ifExists);
        JoinEntryEntityWithEntryAnimationEntityDao.dropTable(db, ifExists);
        JoinEntryEntityWithEntryAtmospherEntityDao.dropTable(db, ifExists);
        JoinEntryEntityWithEntryCategoryEntityDao.dropTable(db, ifExists);
        JoinEntryEntityWithEntryChainEntityDao.dropTable(db, ifExists);
        JoinEntryEntityWithEntryClosingEntityDao.dropTable(db, ifExists);
        JoinEntryEntityWithEntryClosureEntityDao.dropTable(db, ifExists);
        JoinEntryEntityWithEntryCommerciaEntityDao.dropTable(db, ifExists);
        JoinEntryEntityWithEntryCommonTagEntityDao.dropTable(db, ifExists);
        JoinEntryEntityWithEntryContactEntityDao.dropTable(db, ifExists);
        JoinEntryEntityWithEntryDescriptionEntityDao.dropTable(db, ifExists);
        JoinEntryEntityWithEntryDisabledOptionEntityDao.dropTable(db, ifExists);
        JoinEntryEntityWithEntryFamilyOptionEntityDao.dropTable(db, ifExists);
        JoinEntryEntityWithEntryFrpOptionEntityDao.dropTable(db, ifExists);
        JoinEntryEntityWithEntryFurnishedRentalEntityDao.dropTable(db, ifExists);
        JoinEntryEntityWithEntryGroupOptionEntityDao.dropTable(db, ifExists);
        JoinEntryEntityWithEntryImageEntityDao.dropTable(db, ifExists);
        JoinEntryEntityWithEntryLabelEntityDao.dropTable(db, ifExists);
        JoinEntryEntityWithEntryLanguageEntityDao.dropTable(db, ifExists);
        JoinEntryEntityWithEntryLocationEntityDao.dropTable(db, ifExists);
        JoinEntryEntityWithEntryOpeningEntityDao.dropTable(db, ifExists);
        JoinEntryEntityWithEntryOptionEntityDao.dropTable(db, ifExists);
        JoinEntryEntityWithEntryPaymentEntityDao.dropTable(db, ifExists);
        JoinEntryEntityWithEntryPoiOptionEntityDao.dropTable(db, ifExists);
        JoinEntryEntityWithEntryProfileEntityDao.dropTable(db, ifExists);
        JoinEntryEntityWithEntryPublicationEntityDao.dropTable(db, ifExists);
        JoinEntryEntityWithEntryRentalMonthEntityDao.dropTable(db, ifExists);
        JoinEntryEntityWithEntrySectorEntityDao.dropTable(db, ifExists);
        JoinEntryEntityWithEntryServiceEntityDao.dropTable(db, ifExists);
        JoinEntryEntityWithEntrySleepingEntityDao.dropTable(db, ifExists);
        JoinEntryEntityWithEntrySpaceEntityDao.dropTable(db, ifExists);
        JoinEntryEntityWithEntryStandingLevelEntityDao.dropTable(db, ifExists);
        JoinEntryEntityWithEntryStationEntityDao.dropTable(db, ifExists);
        JoinEntryEntityWithEntryTariffEntityDao.dropTable(db, ifExists);
        JoinEntryOpeningEntityWithEntryGridEntityDao.dropTable(db, ifExists);
        EvenementAddressEntityDao.dropTable(db, ifExists);
        EvenementCategoryEntityDao.dropTable(db, ifExists);
        EvenementDescriptionEntityDao.dropTable(db, ifExists);
        EvenementOptionEntityDao.dropTable(db, ifExists);
        EvenementProfileEntityDao.dropTable(db, ifExists);
        EvenementRefEntriesEntityDao.dropTable(db, ifExists);
        EvenementSectoEntityDao.dropTable(db, ifExists);
        EvenementStationEntityDao.dropTable(db, ifExists);
        EvenementEntityDao.dropTable(db, ifExists);
        EventEntityDao.dropTable(db, ifExists);
        JoinEvenementEntityWithEvenementAddressEntityDao.dropTable(db, ifExists);
        JoinEvenementEntityWithEvenementCategoryEntityDao.dropTable(db, ifExists);
        JoinEvenementEntityWithEvenementDescriptionEntityDao.dropTable(db, ifExists);
        JoinEvenementEntityWithEvenementOptionEntityDao.dropTable(db, ifExists);
        JoinEvenementEntityWithEvenementProfileEntityDao.dropTable(db, ifExists);
        JoinEvenementEntityWithEvenementRefEntriesEntityDao.dropTable(db, ifExists);
        JoinEvenementEntityWithEvenementSectoEntityDao.dropTable(db, ifExists);
        JoinEvenementEntityWithEvenementStationEntityDao.dropTable(db, ifExists);
    }

    /**
     * WARNING: Drops all table on Upgrade! Use only during development.
     * Convenience method using a {@link DevOpenHelper}.
     */
    public static DaoSession newDevSession(Context context, String name) {
        Database db = new DevOpenHelper(context, name).getWritableDb();
        DaoMaster daoMaster = new DaoMaster(db);
        return daoMaster.newSession();
    }

    public DaoMaster(SQLiteDatabase db) {
        this(new StandardDatabase(db));
    }

    public DaoMaster(Database db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(DateMajDao.class);
        registerDaoClass(EntryActivityEntityDao.class);
        registerDaoClass(EntryAddressEntityDao.class);
        registerDaoClass(EntryAffiliationEntityDao.class);
        registerDaoClass(EntryAllianceOptionEntityDao.class);
        registerDaoClass(EntryAmenityEntityDao.class);
        registerDaoClass(EntryAnimationEntityDao.class);
        registerDaoClass(EntryAtmospherEntityDao.class);
        registerDaoClass(EntryCapacityEntityDao.class);
        registerDaoClass(EntryCategoryEntityDao.class);
        registerDaoClass(EntryChainEntityDao.class);
        registerDaoClass(EntryClosingEntityDao.class);
        registerDaoClass(EntryClosureEntityDao.class);
        registerDaoClass(EntryCommerciaEntityDao.class);
        registerDaoClass(EntryCommonTagEntityDao.class);
        registerDaoClass(EntryContactEntityDao.class);
        registerDaoClass(EntryDescriptionEntityDao.class);
        registerDaoClass(EntryDisabledOptionEntityDao.class);
        registerDaoClass(EntryFamilyOptionEntityDao.class);
        registerDaoClass(EntryFrpOptionEntityDao.class);
        registerDaoClass(EntryFurnishedRentalEntityDao.class);
        registerDaoClass(EntryGridEntityDao.class);
        registerDaoClass(EntryGroupOptionEntityDao.class);
        registerDaoClass(EntryImageEntityDao.class);
        registerDaoClass(EntryLabelEntityDao.class);
        registerDaoClass(EntryLanguageEntityDao.class);
        registerDaoClass(EntryLivingEntityDao.class);
        registerDaoClass(EntryLocationEntityDao.class);
        registerDaoClass(EntryOpeningEntityDao.class);
        registerDaoClass(EntryOptionEntityDao.class);
        registerDaoClass(EntryPaymentEntityDao.class);
        registerDaoClass(EntryPoiOptionEntityDao.class);
        registerDaoClass(EntryProfileEntityDao.class);
        registerDaoClass(EntryPublicationEntityDao.class);
        registerDaoClass(EntryRentalMonthEntityDao.class);
        registerDaoClass(EntrySectorEntityDao.class);
        registerDaoClass(EntryServiceEntityDao.class);
        registerDaoClass(EntrySleepingEntityDao.class);
        registerDaoClass(EntrySpaceEntityDao.class);
        registerDaoClass(EntryStandingLevelEntityDao.class);
        registerDaoClass(EntryStationEntityDao.class);
        registerDaoClass(EntryTariffEntityDao.class);
        registerDaoClass(EntryTypeEntityDao.class);
        registerDaoClass(EntryEntityDao.class);
        registerDaoClass(JoinEntryEntityWithEntryActivityEntityDao.class);
        registerDaoClass(JoinEntryEntityWithEntryAffiliationEntityDao.class);
        registerDaoClass(JoinEntryEntityWithEntryAllianceOptionEntityDao.class);
        registerDaoClass(JoinEntryEntityWithEntryAmenityEntityDao.class);
        registerDaoClass(JoinEntryEntityWithEntryAnimationEntityDao.class);
        registerDaoClass(JoinEntryEntityWithEntryAtmospherEntityDao.class);
        registerDaoClass(JoinEntryEntityWithEntryCategoryEntityDao.class);
        registerDaoClass(JoinEntryEntityWithEntryChainEntityDao.class);
        registerDaoClass(JoinEntryEntityWithEntryClosingEntityDao.class);
        registerDaoClass(JoinEntryEntityWithEntryClosureEntityDao.class);
        registerDaoClass(JoinEntryEntityWithEntryCommerciaEntityDao.class);
        registerDaoClass(JoinEntryEntityWithEntryCommonTagEntityDao.class);
        registerDaoClass(JoinEntryEntityWithEntryContactEntityDao.class);
        registerDaoClass(JoinEntryEntityWithEntryDescriptionEntityDao.class);
        registerDaoClass(JoinEntryEntityWithEntryDisabledOptionEntityDao.class);
        registerDaoClass(JoinEntryEntityWithEntryFamilyOptionEntityDao.class);
        registerDaoClass(JoinEntryEntityWithEntryFrpOptionEntityDao.class);
        registerDaoClass(JoinEntryEntityWithEntryFurnishedRentalEntityDao.class);
        registerDaoClass(JoinEntryEntityWithEntryGroupOptionEntityDao.class);
        registerDaoClass(JoinEntryEntityWithEntryImageEntityDao.class);
        registerDaoClass(JoinEntryEntityWithEntryLabelEntityDao.class);
        registerDaoClass(JoinEntryEntityWithEntryLanguageEntityDao.class);
        registerDaoClass(JoinEntryEntityWithEntryLocationEntityDao.class);
        registerDaoClass(JoinEntryEntityWithEntryOpeningEntityDao.class);
        registerDaoClass(JoinEntryEntityWithEntryOptionEntityDao.class);
        registerDaoClass(JoinEntryEntityWithEntryPaymentEntityDao.class);
        registerDaoClass(JoinEntryEntityWithEntryPoiOptionEntityDao.class);
        registerDaoClass(JoinEntryEntityWithEntryProfileEntityDao.class);
        registerDaoClass(JoinEntryEntityWithEntryPublicationEntityDao.class);
        registerDaoClass(JoinEntryEntityWithEntryRentalMonthEntityDao.class);
        registerDaoClass(JoinEntryEntityWithEntrySectorEntityDao.class);
        registerDaoClass(JoinEntryEntityWithEntryServiceEntityDao.class);
        registerDaoClass(JoinEntryEntityWithEntrySleepingEntityDao.class);
        registerDaoClass(JoinEntryEntityWithEntrySpaceEntityDao.class);
        registerDaoClass(JoinEntryEntityWithEntryStandingLevelEntityDao.class);
        registerDaoClass(JoinEntryEntityWithEntryStationEntityDao.class);
        registerDaoClass(JoinEntryEntityWithEntryTariffEntityDao.class);
        registerDaoClass(JoinEntryOpeningEntityWithEntryGridEntityDao.class);
        registerDaoClass(EvenementAddressEntityDao.class);
        registerDaoClass(EvenementCategoryEntityDao.class);
        registerDaoClass(EvenementDescriptionEntityDao.class);
        registerDaoClass(EvenementOptionEntityDao.class);
        registerDaoClass(EvenementProfileEntityDao.class);
        registerDaoClass(EvenementRefEntriesEntityDao.class);
        registerDaoClass(EvenementSectoEntityDao.class);
        registerDaoClass(EvenementStationEntityDao.class);
        registerDaoClass(EvenementEntityDao.class);
        registerDaoClass(EventEntityDao.class);
        registerDaoClass(JoinEvenementEntityWithEvenementAddressEntityDao.class);
        registerDaoClass(JoinEvenementEntityWithEvenementCategoryEntityDao.class);
        registerDaoClass(JoinEvenementEntityWithEvenementDescriptionEntityDao.class);
        registerDaoClass(JoinEvenementEntityWithEvenementOptionEntityDao.class);
        registerDaoClass(JoinEvenementEntityWithEvenementProfileEntityDao.class);
        registerDaoClass(JoinEvenementEntityWithEvenementRefEntriesEntityDao.class);
        registerDaoClass(JoinEvenementEntityWithEvenementSectoEntityDao.class);
        registerDaoClass(JoinEvenementEntityWithEvenementStationEntityDao.class);
    }

    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }

    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }

    /**
     * Calls {@link #createAllTables(Database, boolean)} in {@link #onCreate(Database)} -
     */
    public static abstract class OpenHelper extends DatabaseOpenHelper {
        public OpenHelper(Context context, String name) {
            super(context, name, SCHEMA_VERSION);
        }

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(Database db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }

    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name) {
            super(context, name);
        }

        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(Database db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

}
