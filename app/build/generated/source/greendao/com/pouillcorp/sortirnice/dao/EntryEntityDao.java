package com.pouillcorp.sortirnice.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.pouillcorp.sortirnice.entities.entry.EntryEntity.EntriesTypeConverter;
import com.pouillcorp.sortirnice.entities.entry.detail.EntryAddressEntity;
import com.pouillcorp.sortirnice.entities.entry.detail.EntryCapacityEntity;
import com.pouillcorp.sortirnice.entities.entry.detail.EntryLivingEntity;
import com.pouillcorp.sortirnice.enumeration.EntriesType;

import com.pouillcorp.sortirnice.entities.entry.EntryEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ENTRY_ENTITY".
*/
public class EntryEntityDao extends AbstractDao<EntryEntity, Long> {

    public static final String TABLENAME = "ENTRY_ENTITY";

    /**
     * Properties of entity EntryEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property EntryEntityId = new Property(1, Long.class, "entryEntityId", false, "ENTRY_ENTITY_ID");
        public final static Property EntryType = new Property(2, String.class, "entryType", false, "ENTRY_TYPE");
        public final static Property NameFr = new Property(3, String.class, "nameFr", false, "NAME_FR");
        public final static Property NameFrShort = new Property(4, String.class, "nameFrShort", false, "NAME_FR_SHORT");
        public final static Property EntryAddressEntityId = new Property(5, long.class, "entryAddressEntityId", false, "ENTRY_ADDRESS_ENTITY_ID");
        public final static Property Phone = new Property(6, String.class, "phone", false, "PHONE");
        public final static Property Fax = new Property(7, String.class, "fax", false, "FAX");
        public final static Property Email = new Property(8, String.class, "email", false, "EMAIL");
        public final static Property Website = new Property(9, String.class, "website", false, "WEBSITE");
        public final static Property WebsiteReservation = new Property(10, String.class, "websiteReservation", false, "WEBSITE_RESERVATION");
        public final static Property Facebook = new Property(11, String.class, "facebook", false, "FACEBOOK");
        public final static Property Twitter = new Property(12, String.class, "twitter", false, "TWITTER");
        public final static Property EntryLivingEntityId = new Property(13, long.class, "entryLivingEntityId", false, "ENTRY_LIVING_ENTITY_ID");
        public final static Property EntryCapacityEntityId = new Property(14, long.class, "entryCapacityEntityId", false, "ENTRY_CAPACITY_ENTITY_ID");
        public final static Property Opening = new Property(15, String.class, "opening", false, "OPENING");
        public final static Property Closing = new Property(16, String.class, "closing", false, "CLOSING");
        public final static Property Latitude = new Property(17, double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(18, double.class, "longitude", false, "LONGITUDE");
        public final static Property Location_map = new Property(19, String.class, "location_map", false, "LOCATION_MAP");
        public final static Property Note = new Property(20, String.class, "note", false, "NOTE");
        public final static Property Start = new Property(21, String.class, "start", false, "START");
        public final static Property NiceresAvailability = new Property(22, boolean.class, "niceresAvailability", false, "NICERES_AVAILABILITY");
        public final static Property NiceresId = new Property(23, int.class, "niceresId", false, "NICERES_ID");
        public final static Property Created = new Property(24, String.class, "created", false, "CREATED");
        public final static Property Updated = new Property(25, String.class, "updated", false, "UPDATED");
        public final static Property Favori = new Property(26, boolean.class, "favori", false, "FAVORI");
        public final static Property ObsoleteNb = new Property(27, Integer.class, "obsoleteNb", false, "OBSOLETE_NB");
    }

    private DaoSession daoSession;

    private final EntriesTypeConverter entryTypeConverter = new EntriesTypeConverter();

    public EntryEntityDao(DaoConfig config) {
        super(config);
    }
    
    public EntryEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ENTRY_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ENTRY_ENTITY_ID\" INTEGER," + // 1: entryEntityId
                "\"ENTRY_TYPE\" TEXT," + // 2: entryType
                "\"NAME_FR\" TEXT," + // 3: nameFr
                "\"NAME_FR_SHORT\" TEXT," + // 4: nameFrShort
                "\"ENTRY_ADDRESS_ENTITY_ID\" INTEGER NOT NULL ," + // 5: entryAddressEntityId
                "\"PHONE\" TEXT," + // 6: phone
                "\"FAX\" TEXT," + // 7: fax
                "\"EMAIL\" TEXT," + // 8: email
                "\"WEBSITE\" TEXT," + // 9: website
                "\"WEBSITE_RESERVATION\" TEXT," + // 10: websiteReservation
                "\"FACEBOOK\" TEXT," + // 11: facebook
                "\"TWITTER\" TEXT," + // 12: twitter
                "\"ENTRY_LIVING_ENTITY_ID\" INTEGER NOT NULL ," + // 13: entryLivingEntityId
                "\"ENTRY_CAPACITY_ENTITY_ID\" INTEGER NOT NULL ," + // 14: entryCapacityEntityId
                "\"OPENING\" TEXT," + // 15: opening
                "\"CLOSING\" TEXT," + // 16: closing
                "\"LATITUDE\" REAL NOT NULL ," + // 17: latitude
                "\"LONGITUDE\" REAL NOT NULL ," + // 18: longitude
                "\"LOCATION_MAP\" TEXT," + // 19: location_map
                "\"NOTE\" TEXT," + // 20: note
                "\"START\" TEXT," + // 21: start
                "\"NICERES_AVAILABILITY\" INTEGER NOT NULL ," + // 22: niceresAvailability
                "\"NICERES_ID\" INTEGER NOT NULL ," + // 23: niceresId
                "\"CREATED\" TEXT," + // 24: created
                "\"UPDATED\" TEXT," + // 25: updated
                "\"FAVORI\" INTEGER NOT NULL ," + // 26: favori
                "\"OBSOLETE_NB\" INTEGER);"); // 27: obsoleteNb
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ENTRY_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EntryEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long entryEntityId = entity.getEntryEntityId();
        if (entryEntityId != null) {
            stmt.bindLong(2, entryEntityId);
        }
 
        EntriesType entryType = entity.getEntryType();
        if (entryType != null) {
            stmt.bindString(3, entryTypeConverter.convertToDatabaseValue(entryType));
        }
 
        String nameFr = entity.getNameFr();
        if (nameFr != null) {
            stmt.bindString(4, nameFr);
        }
 
        String nameFrShort = entity.getNameFrShort();
        if (nameFrShort != null) {
            stmt.bindString(5, nameFrShort);
        }
        stmt.bindLong(6, entity.getEntryAddressEntityId());
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(7, phone);
        }
 
        String fax = entity.getFax();
        if (fax != null) {
            stmt.bindString(8, fax);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(9, email);
        }
 
        String website = entity.getWebsite();
        if (website != null) {
            stmt.bindString(10, website);
        }
 
        String websiteReservation = entity.getWebsiteReservation();
        if (websiteReservation != null) {
            stmt.bindString(11, websiteReservation);
        }
 
        String facebook = entity.getFacebook();
        if (facebook != null) {
            stmt.bindString(12, facebook);
        }
 
        String twitter = entity.getTwitter();
        if (twitter != null) {
            stmt.bindString(13, twitter);
        }
        stmt.bindLong(14, entity.getEntryLivingEntityId());
        stmt.bindLong(15, entity.getEntryCapacityEntityId());
 
        String opening = entity.getOpening();
        if (opening != null) {
            stmt.bindString(16, opening);
        }
 
        String closing = entity.getClosing();
        if (closing != null) {
            stmt.bindString(17, closing);
        }
        stmt.bindDouble(18, entity.getLatitude());
        stmt.bindDouble(19, entity.getLongitude());
 
        String location_map = entity.getLocation_map();
        if (location_map != null) {
            stmt.bindString(20, location_map);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(21, note);
        }
 
        String start = entity.getStart();
        if (start != null) {
            stmt.bindString(22, start);
        }
        stmt.bindLong(23, entity.getNiceresAvailability() ? 1L: 0L);
        stmt.bindLong(24, entity.getNiceresId());
 
        String created = entity.getCreated();
        if (created != null) {
            stmt.bindString(25, created);
        }
 
        String updated = entity.getUpdated();
        if (updated != null) {
            stmt.bindString(26, updated);
        }
        stmt.bindLong(27, entity.getFavori() ? 1L: 0L);
 
        Integer obsoleteNb = entity.getObsoleteNb();
        if (obsoleteNb != null) {
            stmt.bindLong(28, obsoleteNb);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EntryEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long entryEntityId = entity.getEntryEntityId();
        if (entryEntityId != null) {
            stmt.bindLong(2, entryEntityId);
        }
 
        EntriesType entryType = entity.getEntryType();
        if (entryType != null) {
            stmt.bindString(3, entryTypeConverter.convertToDatabaseValue(entryType));
        }
 
        String nameFr = entity.getNameFr();
        if (nameFr != null) {
            stmt.bindString(4, nameFr);
        }
 
        String nameFrShort = entity.getNameFrShort();
        if (nameFrShort != null) {
            stmt.bindString(5, nameFrShort);
        }
        stmt.bindLong(6, entity.getEntryAddressEntityId());
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(7, phone);
        }
 
        String fax = entity.getFax();
        if (fax != null) {
            stmt.bindString(8, fax);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(9, email);
        }
 
        String website = entity.getWebsite();
        if (website != null) {
            stmt.bindString(10, website);
        }
 
        String websiteReservation = entity.getWebsiteReservation();
        if (websiteReservation != null) {
            stmt.bindString(11, websiteReservation);
        }
 
        String facebook = entity.getFacebook();
        if (facebook != null) {
            stmt.bindString(12, facebook);
        }
 
        String twitter = entity.getTwitter();
        if (twitter != null) {
            stmt.bindString(13, twitter);
        }
        stmt.bindLong(14, entity.getEntryLivingEntityId());
        stmt.bindLong(15, entity.getEntryCapacityEntityId());
 
        String opening = entity.getOpening();
        if (opening != null) {
            stmt.bindString(16, opening);
        }
 
        String closing = entity.getClosing();
        if (closing != null) {
            stmt.bindString(17, closing);
        }
        stmt.bindDouble(18, entity.getLatitude());
        stmt.bindDouble(19, entity.getLongitude());
 
        String location_map = entity.getLocation_map();
        if (location_map != null) {
            stmt.bindString(20, location_map);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(21, note);
        }
 
        String start = entity.getStart();
        if (start != null) {
            stmt.bindString(22, start);
        }
        stmt.bindLong(23, entity.getNiceresAvailability() ? 1L: 0L);
        stmt.bindLong(24, entity.getNiceresId());
 
        String created = entity.getCreated();
        if (created != null) {
            stmt.bindString(25, created);
        }
 
        String updated = entity.getUpdated();
        if (updated != null) {
            stmt.bindString(26, updated);
        }
        stmt.bindLong(27, entity.getFavori() ? 1L: 0L);
 
        Integer obsoleteNb = entity.getObsoleteNb();
        if (obsoleteNb != null) {
            stmt.bindLong(28, obsoleteNb);
        }
    }

    @Override
    protected final void attachEntity(EntryEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EntryEntity readEntity(Cursor cursor, int offset) {
        EntryEntity entity = new EntryEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // entryEntityId
            cursor.isNull(offset + 2) ? null : entryTypeConverter.convertToEntityProperty(cursor.getString(offset + 2)), // entryType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nameFr
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nameFrShort
            cursor.getLong(offset + 5), // entryAddressEntityId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // phone
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // fax
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // email
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // website
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // websiteReservation
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // facebook
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // twitter
            cursor.getLong(offset + 13), // entryLivingEntityId
            cursor.getLong(offset + 14), // entryCapacityEntityId
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // opening
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // closing
            cursor.getDouble(offset + 17), // latitude
            cursor.getDouble(offset + 18), // longitude
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // location_map
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // note
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // start
            cursor.getShort(offset + 22) != 0, // niceresAvailability
            cursor.getInt(offset + 23), // niceresId
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // created
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // updated
            cursor.getShort(offset + 26) != 0, // favori
            cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27) // obsoleteNb
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EntryEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEntryEntityId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setEntryType(cursor.isNull(offset + 2) ? null : entryTypeConverter.convertToEntityProperty(cursor.getString(offset + 2)));
        entity.setNameFr(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNameFrShort(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEntryAddressEntityId(cursor.getLong(offset + 5));
        entity.setPhone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFax(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEmail(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setWebsite(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setWebsiteReservation(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFacebook(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTwitter(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setEntryLivingEntityId(cursor.getLong(offset + 13));
        entity.setEntryCapacityEntityId(cursor.getLong(offset + 14));
        entity.setOpening(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setClosing(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setLatitude(cursor.getDouble(offset + 17));
        entity.setLongitude(cursor.getDouble(offset + 18));
        entity.setLocation_map(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setNote(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setStart(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setNiceresAvailability(cursor.getShort(offset + 22) != 0);
        entity.setNiceresId(cursor.getInt(offset + 23));
        entity.setCreated(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setUpdated(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setFavori(cursor.getShort(offset + 26) != 0);
        entity.setObsoleteNb(cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EntryEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EntryEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EntryEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getEntryAddressEntityDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getEntryLivingEntityDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getEntryCapacityEntityDao().getAllColumns());
            builder.append(" FROM ENTRY_ENTITY T");
            builder.append(" LEFT JOIN ENTRY_ADDRESS_ENTITY T0 ON T.\"ENTRY_ADDRESS_ENTITY_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN ENTRY_LIVING_ENTITY T1 ON T.\"ENTRY_LIVING_ENTITY_ID\"=T1.\"_id\"");
            builder.append(" LEFT JOIN ENTRY_CAPACITY_ENTITY T2 ON T.\"ENTRY_CAPACITY_ENTITY_ID\"=T2.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected EntryEntity loadCurrentDeep(Cursor cursor, boolean lock) {
        EntryEntity entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        EntryAddressEntity address = loadCurrentOther(daoSession.getEntryAddressEntityDao(), cursor, offset);
         if(address != null) {
            entity.setAddress(address);
        }
        offset += daoSession.getEntryAddressEntityDao().getAllColumns().length;

        EntryLivingEntity living = loadCurrentOther(daoSession.getEntryLivingEntityDao(), cursor, offset);
         if(living != null) {
            entity.setLiving(living);
        }
        offset += daoSession.getEntryLivingEntityDao().getAllColumns().length;

        EntryCapacityEntity capacity = loadCurrentOther(daoSession.getEntryCapacityEntityDao(), cursor, offset);
         if(capacity != null) {
            entity.setCapacity(capacity);
        }

        return entity;    
    }

    public EntryEntity loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<EntryEntity> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<EntryEntity> list = new ArrayList<EntryEntity>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<EntryEntity> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<EntryEntity> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
