package com.pouillcorp.sortirnice.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.pouillcorp.sortirnice.entities.event.join.JoinEvenementEntityWithEvenementDescriptionEntity;

import com.pouillcorp.sortirnice.entities.event.detail.EvenementDescriptionEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EVENEMENT_DESCRIPTION_ENTITY".
*/
public class EvenementDescriptionEntityDao extends AbstractDao<EvenementDescriptionEntity, Long> {

    public static final String TABLENAME = "EVENEMENT_DESCRIPTION_ENTITY";

    /**
     * Properties of entity EvenementDescriptionEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Language = new Property(1, String.class, "language", false, "LANGUAGE");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property Value = new Property(3, String.class, "value", false, "VALUE");
    }

    private Query<EvenementDescriptionEntity> evenementEntity_ListDescriptionsQuery;

    public EvenementDescriptionEntityDao(DaoConfig config) {
        super(config);
    }
    
    public EvenementDescriptionEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EVENEMENT_DESCRIPTION_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"LANGUAGE\" TEXT," + // 1: language
                "\"TYPE\" TEXT," + // 2: type
                "\"VALUE\" TEXT);"); // 3: value
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EVENEMENT_DESCRIPTION_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EvenementDescriptionEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String language = entity.getLanguage();
        if (language != null) {
            stmt.bindString(2, language);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(4, value);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EvenementDescriptionEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String language = entity.getLanguage();
        if (language != null) {
            stmt.bindString(2, language);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(4, value);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EvenementDescriptionEntity readEntity(Cursor cursor, int offset) {
        EvenementDescriptionEntity entity = new EvenementDescriptionEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // language
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // value
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EvenementDescriptionEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLanguage(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setValue(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EvenementDescriptionEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EvenementDescriptionEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EvenementDescriptionEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "listDescriptions" to-many relationship of EvenementEntity. */
    public List<EvenementDescriptionEntity> _queryEvenementEntity_ListDescriptions(Long evenementEntityId) {
        synchronized (this) {
            if (evenementEntity_ListDescriptionsQuery == null) {
                QueryBuilder<EvenementDescriptionEntity> queryBuilder = queryBuilder();
                queryBuilder.join(JoinEvenementEntityWithEvenementDescriptionEntity.class, JoinEvenementEntityWithEvenementDescriptionEntityDao.Properties.EvenementDescriptionEntityId)
                    .where(JoinEvenementEntityWithEvenementDescriptionEntityDao.Properties.EvenementEntityId.eq(evenementEntityId));
                evenementEntity_ListDescriptionsQuery = queryBuilder.build();
            }
        }
        Query<EvenementDescriptionEntity> query = evenementEntity_ListDescriptionsQuery.forCurrentThread();
        query.setParameter(0, evenementEntityId);
        return query.list();
    }

}
